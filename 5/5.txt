权限：
	Root 不受 权限的管理

sudo：
	不切换用户，就想让普通用户，以root的身份，执行对应的命令

sudo whoami
[sudo] password for Test: (Test用户的密码)
root

输入过密码之后的几分钟内，再 sudo 不需要重复输入密码


sudo 命令，短暂的提权 -> root 执行命令 没问题
但是    你让我提权的时候，输入自己的密码是什么鬼？

[stu1@sec ~]$ sudo whoami
[sudo] password for stu1: 
stu1 is not in the sudoers file.  This incident will be reported.

因为系统不相信你这个用户， 需要将当前用户，添加到/etc/sudoers中    (以后说)

类似于 -- 黑名单，白名单的概念
黑名单 -- 禁止访问 -- 白名单 -- 全部放行 


回答问题：给受信任的用户，提供最少的执行障碍。


为什么不直接给root用户？
为什么中间要加一层的意义 ： 我可以随时拦截你，可以监控到你



什么是权限呢？
	权限是约束人的（一个或者某些群体）
	目标对象(电影网站，音乐app)，本来就没有对应的属性(业务)

	权限：一件事情是否允许被谁(人)做(物的属性)

	文件权限： 人 + 文件的属性

	人： -- 不是名字 -- 而是角色 -- 权限约束的不是人，而是某个角色(身份)

		文件的拥有者（owner）

		所属组（grouper）

		其他人（other）

		root stu1 yzk ... 这些是具体的人，而上面是角色(身份)，相互不冲突，而是相互补充的
		系统约束的不是人，而是角色，系统会将具体的人归类为不同的角色， 权限取决你的身份

	文件属性：


[root@sec 1]# ll
total 0
-rw-r--r-- 1  root   root   0   Oct 19 15:37 file.txt
              拥有者 所属组
stu1 用户 既不是 拥有者，也不是所属组  对于这个文件来说 stu1 用户就是 other

角色是不能脱离人的

	为什么会存在所属组：
		团队协作共享一些文件

		如果之后 owner 和 other 在放开other权限的时候， 团队A和团队B都可以看到，不合理

		拥有者只能有一个



	文件的属性有哪些？
		r 读   
		w 写   
		x 执行 
		被谁读，被谁写，被谁执行，同样离不开角色

文件 = 内容 + 属性

drwxr-xr-x      2 root root 4096 Oct 19 16:01 test
-rw-r--r--      1 root root    0 Oct 19 15:37 file.txt

10个字符：
	第1数列：文件类型    Linux下文件类型 和 Windows(文件的后缀) 差别很大
					    Linux与文件后缀无关(不是不可以使用)
						如果要使用，仅仅是给用户一个提示的符号来使用，后缀的本质其实就是文件名的一部分
					通过 ll 显示的众多属性列中的第一列的第一个字符来区分文件的类型

	- ： 普通文件（源代码、库文件、可执行程序、文档压缩包等等）
	d ： 目录文件
	c ： 字符设备文件 -- 诸如：键盘、显示器  /dev/tty
	b ： 块设备 -- 诸如：磁盘 /dev/vda1
	l ： 链接文件 -- 诸如：快捷方式本质上就是一个链接文件
	p ： 管道文件 -- 
	s ： socket文件 -- 不常见


链接文件 ： 
[root@sec 1]# ln -s  file.txt a
[root@sec 1]# ll
total 4
lrwxrwxrwx 1 root root    8 Oct 19 16:18 a -> file.txt
-rw-r--r-- 1 root root    0 Oct 19 15:37 file.txt


[root@sec 1]# mkfifo pipe
[root@sec 1]# ll pipe
prw-r--r-- 1 root root 0 Oct 19 16:21 pipe
进程间通信再细说


[root@sec 1]# gcc test.c
[root@sec 1]# mv test.c test.txt
[root@sec 1]# gcc test.txt 
test.txt: file not recognized: File format not recognized
collect2: error: ld returned 1 exit status

gcc 等工具对文件后缀可能有要求，但是Linux系统对于文件后缀没有要求
两者并不冲突


剩下的9个字符：
	每三个字符 对应一种角色的权限 拥有者 所属组 other
				对应的只有 r w x -(无)


如何操作权限呢？

		设置文件属性
		chmod u-r test.txt
		chmod u+x test.txt
		chmod u-rwx test.txt

		chmod g-rw test.txt

		chmod o-r test.txt

		chmod u-rwx,g-rwx test.txt

		chmod u+rw,g+rw,o-rwx test.txt

		chmod a-rwx test.txt

	改一个文件的权限，只能是拥有者或者root

	系统那whoami的结果对文件进行角色匹配时，从左往右依次匹配，两个都匹配不到是other
	只要匹配的就只能用所匹配的权限进行操作（解释u的权限是可读，g的权限是读写，作为拥有者为什么不能写）


		+ - =


	设置文件所属角色：
		sudo chown stu2 test.txt

		sudo chgrp gaobo test.txt

		sudo chown gaobo:gaobo test.txt


		r  w  x  r  w  x  r  -  x
		1  1  1  1  1  1  1  0  1
		chmod 000 test.txt
		chmod 664 test.txt


	上面


为什么要有权限呢？
	便于系统安全的管理


为什么一个文件的默认权限，是我们看到的这样？
	Linux规定：
		目录文件  起始权限是 777
		其他文件  起始权限是 666

			在此之下有一个叫做权限掩码 - umask
			0002 -- 系统会默认配置好umask 权限掩码：凡是在umask中出现的权限都必须在起始权限中去掉
				0 说明 002 是一个二进制数 0 - 000  0 - 000  2 - 010

			上面所说的去掉是上面意思？怎么去掉？

			umask 0444 可以自行修改
				怎么去掉是做减法吗？

				实验：
					普通文件默认 ： 666 我们设置 umask 为 0111 如果相减的话
								则是 555 r-x 
					但是我们发现，文件权限没有变化，所以不是减法

			最终权限 = 起始权限 & (~umask)
				0666 110 110 110
				0111 001 001 001
				     110 110 110
				     -----------
				     110 110 110 



file 命令：
	file + 文件名  输出该文件的类型

如果我们要进入一个目录，需要什么权限？
	目录 r 权限 -- 不可以查看该目录的列表
	    w  权限 -- 不可以创建文件
	    x  权限 -- 不可以进入这个目录

	这也说明了为什么系统要规定一个目录必须是777开始的，一般都要进入 x 权限
	 

